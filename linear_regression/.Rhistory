library("swirl")
install.packages(swirl)
swirl()
library(swirl)
install.packages("devtools")
library(devtools)
install_github("swirldev/swirl")
swirl()
library(swirl)
swirl()
getwd()
read.table("refine_original.xlsx",header = TRUE)
install.packages(XLConnect)
install.packages(XLConnect)
library(XLConnect)
install.packages(XLConnect)
install.packages("XLConnect")
library(XLConnect)
library("XLConnect")
install.packages("XLConnectJars")
library("XLConnect")
library(XLConnect)
library(XLConnect)
library("XLConnect")
df <- readWorksheetFromFile("refine_original.xlsx",sheet=1)
View(df)
install.packages("readxl")
df
# titanic is avaliable in your workspace
# Check out the structure of titanic
str(titanic)
# Use ggplot() for the first instruction
ggplot(titanic,aes(x = factor(Pclass), fill = factor(Sex))) +
geom_bar(position = "dodge")
# Use ggplot() for the second instruction
ggplot(titanic,aes(x = factor(Pclass), fill = factor(Sex))) +
geom_bar(position = "dodge") +
facet_grid("~Survived")
# Position jitter (use below)
posn.j <- position_jitter(0.5, 0)
# Use ggplot() for the last instruction
ggplot(titanic,aes(x = factor(Pclass), y =Age, col = factor(Sex))) +
geom_jitter(size = 3,  alpha = 0.5, position = posn.j) +
facet_grid("~Survived")
# titanic is avaliable in your workspace
titanic<-read.csv("titanic3_original.csv", na.strings = "")
# Check out the structure of titanic
str(titanic)
# Use ggplot() for the first instruction
install.packages("ggplot2")
ggplot(titanic,aes(x = factor(Pclass), fill = factor(Sex))) +
geom_bar(position = "dodge")
# Use ggplot() for the second instruction
ggplot(titanic,aes(x = factor(Pclass), fill = factor(Sex))) +
geom_bar(position = "dodge") +
facet_grid("~Survived")
# Position jitter (use below)
posn.j <- position_jitter(0.5, 0)
# Use ggplot() for the last instruction
ggplot(titanic,aes(x = factor(Pclass), y =Age, col = factor(Sex))) +
geom_jitter(size = 3,  alpha = 0.5, position = posn.j) +
facet_grid("~Survived")
# titanic is avaliable in your workspace
titanic<-read.csv("titanic3_original.csv", na.strings = "")
# Check out the structure of titanic
str(titanic)
# Use ggplot() for the first instruction
install.packages("ggplot2")
library(ggplot2)
ggplot(titanic,aes(x = factor(Pclass), fill = factor(Sex))) +
geom_bar(position = "dodge")
# Use ggplot() for the second instruction
ggplot(titanic,aes(x = factor(Pclass), fill = factor(Sex))) +
geom_bar(position = "dodge") +
facet_grid("~Survived")
# Position jitter (use below)
posn.j <- position_jitter(0.5, 0)
# Use ggplot() for the last instruction
ggplot(titanic,aes(x = factor(Pclass), y =Age, col = factor(Sex))) +
geom_jitter(size = 3,  alpha = 0.5, position = posn.j) +
facet_grid("~Survived")
#Load data into data frame df and replace blanks with NA
df<-read.csv("titanic3_original.csv", na.strings = "")
#Replace missing data in port of embarkation with 'S'
df$embarked[is.na(df$embarked)]<-"S"
#Replace the empty age cells with mean of age then round the value
df$age[is.na(df$age)]<-mean(df$age,na.rm = TRUE)
df$age <-round(df$age,2)
#Convert boat columns to character and replace NA values with 'None'
df$boat<-as.character(df$boat)
dfdf$boat[is.na(df$boat)]<- "None"
#create a new column 'has_cabin_number with value 1 if there is a cabin number and 0 otherwise
df$has_cabin_number<-ifelse(is.na(df$cabin),0,1)
write.csv(df,"titanic_clean.csv")
#Load data into data frame df and replace blanks with NA
df<-read.csv("titanic3_original.csv", na.strings = "")
#Replace missing data in port of embarkation with 'S'
df$embarked[is.na(df$embarked)]<-"S"
#Replace the empty age cells with mean of age then round the value
df$age[is.na(df$age)]<-mean(df$age,na.rm = TRUE)
df$age <-round(df$age,2)
#Convert boat columns to character and replace NA values with 'None'
df$boat<-as.character(df$boat)
df$boat[is.na(df$boat)]<- "None"
#create a new column 'has_cabin_number with value 1 if there is a cabin number and 0 otherwise
df$has_cabin_number<-ifelse(is.na(df$cabin),0,1)
write.csv(df,"titanic_clean.csv")
#Load data into R
df<-read.csv("refine_original.csv")
#Fix the misspwlling in the company column
df$company<- gsub("\\s","",df$company)
philips <- grep("\\Bips$\\b", df$company, TRUE)
df$company[philips]<- "philips"
akzo <- grep("\\bakz.\\b",df$company,TRUE)
df$company[akzo]<-"akzo"
van<-grep("van\\B", df$company,TRUE)
df$company[van]<-"van houten"
unil <- grep("uni\\B", df$company, TRUE)
df$company[unil]<-"unilever"
library(tidyr)
#Seperate product code and number
df<-separate(df, Product.code...number,c("product_code","product_number"),sep="-")
#Add product category column
df$product_category<-""
#Populate product category
p<-grep("p", df$product_code,TRUE)
df$product_category[p]<-"Smartphone"
v<-grep("v", df$product_code,TRUE)
df$product_category[v]<-"TV"
x<-grep("x", df$product_code,TRUE)
df$product_category[x]<-"Laptop"
q<-grep("q", df$product_code,TRUE)
df$product_category[q]<-"Tablet"
df<-df[c(1,2,8,3,4,5,6,7)]
setwd("C:/Users/Noura/Documents/R/Data Science Foundation/linear_regression/linear_regression")
# setwd("~/Desktop/Rstatistics")
# setwd("C:/Users/dataclass/Desktop/Rstatistics")
setwd("C:/Users/Noura/Documents/R/Data Science Foundation/linear_regression/linear_regression")
##   You might also start by listing the files in your working directory
getwd() # where am I?
list.files("dataSets") # files in the dataSets folder
## Load the states data
## ââââââââââââââââââââââââ
# read the states data
states.data <- readRDS("dataSets/states.rds")
#get labels
states.info <- data.frame(attributes(states.data)[c("names", "var.labels")])
#look at last few labels
tail(states.info, 8)
View(states.info)
plot(states.data$metro, states.data$energy)
# summary of expense and csat columns, all rows
sts.ex.sat <- subset(states.data, select = c("expense", "csat"))
summary(sts.ex.sat)
# correlation between expense and csat
cor(sts.ex.sat)
setwd("C:/Users/Noura/Documents/R/Data Science Foundation/linear_regression/linear_regression")
##   Load data set
states <- readRDS("dataSets/states.rds")
##   Plot the data
plot(states$metro, states$energy)
model <- lm(energy ~ metro, data = states)
model1 <- lm(energy ~ metro, data = states)
smmary(model1)
summary(model1)
SSE <- sum(model1$residuals^2)
SSE
plot(model1)
## Load the states data
## ââââââââââââââââââââââââ
# read the states data
states.data <- readRDS("dataSets/states.rds")
#get labels
states.info <- data.frame(attributes(states.data)[c("names", "var.labels")])
#look at last few labels
tail(states.info, 8)
## Linear regression
## âââââââââââââââââââ
## Examine the data before fitting models
## ââââââââââââââââââââââââââââââââââââââââââ
##   Start by examining the data to check for problems.
# summary of expense and csat columns, all rows
sts.ex.sat <- subset(states.data, select = c("expense", "csat"))
summary(sts.ex.sat)
# correlation between expense and csat
cor(sts.ex.sat)
## Plot the data before fitting models
## âââââââââââââââââââââââââââââââââââââââ
##   Plot the data to look for multivariate outliers, non-linear
##   relationships etc.
cor(energy.metro)
cor(energy,metro)
cor(states$energy,states$metro)
cor(states$energy.states$metro)
cor(states$energy,states$metro)
cor(states$energy,states$income)
plot(states$income, states$energy)
plot(states$green, states$energy)
plot(states$density, states$energy)
plot(states$waste, states$energy)
plot(states$area, states$energy)
model2 <- lm(energy ~ metro + green + area , data = states)
summary(model2)
model2 <- lm(energy ~  green + area , data = states)
##   Model2 Summary
summary(model2)
model2 <- lm(energy ~ metro + green , data = states)
##   Model2 Summary
summary(model2)
summary(model1)
# scatter plot of expense vs csat
plot(sts.ex.sat)
## Linear regression example
## âââââââââââââââââââââââââââââ
##   â¢ Linear regression models can be fit with the `lm()' function
##   â¢ For example, we can use `lm' to predict SAT scores based on
##     per-pupal expenditures:
# Fit our regression model
sat.mod <- lm(csat ~ expense, # regression formula
data=states.data) # data set
# Summarize and print the results
summary(sat.mod) # show regression coefficients table
## Why is the association between expense and SAT scores /negative/?
## âââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ
##   Many people find it surprising that the per-capita expenditure on
##   students is negatively related to SAT scores. The beauty of multiple
##   regression is that we can try to pull these apart. What would the
##   association between expense and SAT scores be if there were no
##   difference among the states in the percentage of students taking the
##   SAT?
summary(lm(csat ~ expense + percent, data = states.data))
## The lm class and methods
## ââââââââââââââââââââââââââââ
##   OK, we fit our model. Now what?
##   â¢ Examine the model object:
class(sat.mod)
names(sat.mod)
methods(class = class(sat.mod))[1:9]
plot(model2)
## Linear Regression Assumptions
## âââââââââââââââââââââââââââââââââ
##   â¢ Ordinary least squares regression relies on several assumptions,
##     including that the residuals are normally distributed and
##     homoscedastic, the errors are independent and the relationships are
##     linear.
##   â¢ Investigate these assumptions visually by plotting your model:
par(mar = c(4, 4, 2, 2), mfrow = c(1, 2)) #optional
plot(sat.mod, which = c(1, 2)) # "which" argument optional
## Comparing models
## ââââââââââââââââââââ
##   Do congressional voting patterns predict SAT scores over and above
##   expense? Fit two models and compare them:
# fit another model, adding house and senate as predictors
sat.voting.mod <-  lm(csat ~ expense + house + senate,
data = na.omit(states.data))
sat.mod <- update(sat.mod, data=na.omit(states.data))
# compare using the anova() function
anova(sat.mod, sat.voting.mod)
coef(summary(sat.voting.mod))
## Exercise: least squares regression
## ââââââââââââââââââââââââââââââââââââââââ
##   Use the /states.rds/ data set. Fit a model predicting energy consumed
##   per capita (energy) from the percentage of residents living in
##   metropolitan areas (metro). Be sure to
##   1. Examine/plot the data before fitting the model
##   2. Print and interpret the model `summary'
##   3. `plot' the model to look for deviations from modeling assumptions
##   Select one or more additional predictors to add to your model and
##   repeat steps 1-3. Is this model significantly better than the model
##   with /metro/ as the only predictor?
## Interactions and factors
## ââââââââââââââââââââââââââ
## Modeling interactions
## âââââââââââââââââââââââââ
##   Interactions allow us assess the extent to which the association
##   between one predictor and the outcome depends on a second predictor.
##   For example: Does the association between expense and SAT scores
##   depend on the median income in the state?
#Add the interaction to the model
sat.expense.by.percent <- lm(csat ~ expense*income,
data=states.data)
#Show the results
coef(summary(sat.expense.by.percent)) # show regression coefficients table
## Regression with categorical predictors
## ââââââââââââââââââââââââââââââââââââââââââ
##   Let's try to predict SAT scores from region, a categorical variable.
##   Note that you must make sure R does not think your categorical
##   variable is numeric.
# make sure R knows region is categorical
str(states.data$region)
states.data$region <- factor(states.data$region)
#Add region to the model
sat.region <- lm(csat ~ region,
data=states.data)
#Show the results
coef(summary(sat.region)) # show regression coefficients table
anova(sat.region) # show ANOVA table
##   Again, *make sure to tell R which variables are categorical by
##   converting them to factors!*
## Setting factor reference groups and contrasts
## âââââââââââââââââââââââââââââââââââââââââââââââââ
##   In the previous example we use the default contrasts for region. The
##   default in R is treatment contrasts, with the first level as the
##   reference. We can change the reference group or use another coding
##   scheme using the `C' function.
# print default contrasts
contrasts(states.data$region)
# change the reference group
coef(summary(lm(csat ~ C(region, base=4),
data=states.data)))
# change the coding scheme
coef(summary(lm(csat ~ C(region, contr.helmert),
data=states.data)))
##   See also `?contrasts', `?contr.treatment', and `?relevel'.
## Exercise: interactions and factors
## ââââââââââââââââââââââââââââââââââââââââ
##   Use the states data set.
model3 <- lm(energy ~ metro*green, data = states)
coef(summary(model3))
coef(summary(sat.expense.by.percent)) # show regression coefficients table
str(states$region)
states$region <- factor(states.data$region)
states$region <- factor(states$region)
model4 <- lm(energy ~ region , data = states)
coef(summary(model4))
plot(model4)
summary(model4)
